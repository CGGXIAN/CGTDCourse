=============================
Python运算符
=============================

- 算术运算符
- 比较运算符
- 赋值运算符
- 逻辑运算符
- 位运算符
- 成员运算符
- 身份运算符

Python算术运算符

======= ================================================== =============================
``+``    加 - 两个对象相加                                      2 + 3 输出结果 5
``-``    减 - 得到负数或是一个数减去另一个数                      2 - 3 输出结果 -1
``*``    乘 - 两个数相乘或是返回一个被重复若干次的字符串           2 * 3 输出结果 6
``/``    除 - x除以y                                            3 / 2 输出结果 1
``%``    取模 - 返回除法的余数                                   3 % 2 输出结果 1
``**``   幂 - 返回x的y次幂                                      2 ** 3 输出结果 8
``//``   取整除 - 返回商的整数部分（向下取整）                    3 // 2 输出结果 1
======= ================================================== =============================

Python比较（关系）运算符

======= ======================================== =============================
``==``    等于 - 比较对象是否相等                   (2 == 3) 返回 False
``!=``    不等于 - 比较两个对象是否不相等            (2 != 3) 返回 true
``<>``    不等于 - 比较两个对象是否不相等            (2 <> 3) 返回 true
``>``     大于 - 返回x是否大于y                     (2 > 3) 返回 False
``<``     小于 - 返回x是否小于y                     (2 < 3) 返回 true
``>=``    大于等于 - 返回x是否大于等于y              (2 >= 3) 返回 False
``<=``    小于等于 - 返回x是否小于等于y              (2 <= 3) 返回 true
======= ======================================== =============================

Python赋值运算符

========= ==================== ===========================================================
``=``      简单的赋值运算符            c = a + b 将 a + b 的运算结果赋值为 c
``+=``     加法赋值运算符              c += a 等效于 c = c + a
``-=``     减法赋值运算符              c -= a 等效于 c = c - a
``*=``     乘法赋值运算符              c *= a 等效于 c = c * a
``/=``     除法赋值运算符              c /= a 等效于 c = c / a
``%=``     取模赋值运算符              c %= a 等效于 c = c % a
``**=``    幂赋值运算符                c **= a 等效于 c = c ** a
``//=``    取整除赋值运算符            c //= a 等效于 c = c // a
========= ==================== ===========================================================

Python位运算符

======== ================== ====================================================
``&``      按位与运算符        (60 & 13) 输出结果 12，二进制解释： 0000 1100
``|``      按位或运算符        (60 | 13) 输出结果 61，二进制解释： 0011 1101
``^``      按位异或运算符      (60 ^ 13) 输出结果 49，二进制解释： 0011 0001
``~``      按位取反运算符      (~60) 输出结果 -61，二进制解释： 1100 0011
``<<``     左移动运算符        60 << 2 输出结果 240，二进制解释： 1111 0000
``>>``     右移动运算符        60 >> 2 输出结果 15，二进制解释： 0000 1111
======== ================== ====================================================

Python逻辑运算符

======== ========== ========== ============================
``and``   x and y    布尔"与"   (10 and 20) 返回 20
``or``    x or y     布尔"或"   (10 or 20) 返回 10
``not``   not x      布尔"非"   not(10 and 20) 返回 False
======== ========== ========== ============================


Python成员运算符

============== =============================================================== ================
``in``            如果在指定的序列中找到值返回 True，否则返回 False。               x in y
``not in``        如果在指定的序列中没有找到值返回 True，否则返回 False。            x not in y
============== =============================================================== ================

Python身份运算符

============== ================================================== ==================================
``is``            is是判断两个标识符是不是引用自一个对象               x is y，类似id(x) == id(y)
``is not``        is not是判断两个标识符是不是引用自不同对象           x is not y，类似id(x) != id(y)
============== ================================================== ==================================
